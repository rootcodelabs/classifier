declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'CORRECTED'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: inferenceId
        type: number
        description: "Body field 'inferenceId'"
      - field: isCorrected
        type: boolean
        description: "Body field 'isCorrected'"
      - field: correctedLabels
        type: json
        description: "Body field 'correctedLabels'"
      - field: averageCorrectedClassesProbability
        type: int
        description: "Body field 'averageCorrectedClassesProbability'"
      - field: primaryFolderId
        type: string
        description: "Body field 'primaryFolderId'"
      - field: platform
        type: string
        description: "Body field 'platform'"


extract_request_data:
  assign:
    inference_id: ${incoming.body.inferenceId}
    is_corrected: ${incoming.body.isCorrected}
    corrected_labels: ${incoming.body.correctedLabels}
    average_corrected_classes_probability: ${incoming.body.averageCorrectedClassesProbability}
    primary_folder_id: ${incoming.body.primaryFolderId}
    platform: ${incoming.body.platform}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${inference_id !== null ||  corrected_labels !== null || average_corrected_classes_probability !== null || platform !== null}
      next: check_platform_data
  next: return_incorrect_request

check_platform_data:
  switch:
    - condition: ${platform == 'OUTLOOK'}
      next: check_primary_folder_exist
  next: get_input_metadata_by_id

check_primary_folder_exist:
  switch:
    - condition: ${primary_folder_id !== null}
      next: get_input_metadata_by_id
  next: return_primary_folder_not_found

get_input_metadata_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-input-metadata-exits-by-id"
    body:
      id: ${inference_id}
  result: res_input_id
  next: check_input_metadata_status

check_input_metadata_status:
  switch:
    - condition: ${200 <= res_input_id.response.statusCodeValue && res_input_id.response.statusCodeValue < 300}
      next: check_input_metadata_exist
  next: assign_fail_response

check_input_metadata_exist:
  switch:
    - condition: ${res_input_id.response.body.length>0}
      next: update_input_metadata
  next: return_inference_data_not_found

update_input_metadata:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-input-metadata"
    body:
      id: ${inference_id}
      is_corrected: ${is_corrected}
      corrected_labels: ${JSON.stringify(corrected_labels)}
      average_corrected_classes_probability: ${average_corrected_classes_probability}
      primary_folder_id: ${platform !== 'OUTLOOK' ? '' :primary_folder_id}
  result: res_input
  next: check_status

check_status:
  switch:
    - condition: ${200 <= res_input.response.statusCodeValue && res_input.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      inferenceId: '${inference_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      inferenceId: '${inference_id}',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_primary_folder_not_found:
  status: 400
  return: 'Missing Primary Folder Id'
  next: end

return_inference_data_not_found:
  status: 400
  return: 'Inference data not found'
  next: end
