declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'EXIST'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: inputId
        type: string
        description: "Body field 'inputId'"

extract_data:
  assign:
    input_id: ${incoming.body.inputId}
    exist: false
  next: get_input_metadata_by_id

get_input_metadata_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-basic-input-metadata-by-input-id"
    body:
      input_id: ${input_id}
  result: res_input_id
  next: check_input_metadata_status

check_input_metadata_status:
  switch:
    - condition: ${200 <= res_input_id.response.statusCodeValue && res_input_id.response.statusCodeValue < 300}
      next: check_input_metadata_exist
  next: assign_fail_response

check_input_metadata_exist:
  switch:
    - condition: ${res_input_id.response.body.length>0}
      next: assign_exist_data
  next: assign_fail_response

assign_exist_data:
  assign:
    exist : true
    value: [{
      inferenceId: '${res_input_id.response.body[0].id}',
      inputId: '${res_input_id.response.body[0].inputId}',
      platform: '${res_input_id.response.body[0].platform}'
    }]
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      operationSuccessful: true,
      exist: '${exist}',
      data: '${value}'
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      operationSuccessful: false,
      exist: '${exist}',
      data: '${[]}'
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end