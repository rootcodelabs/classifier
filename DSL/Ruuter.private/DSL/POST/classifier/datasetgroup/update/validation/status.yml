declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'STATUS'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: dgId
        type: number
        description: "Body field 'dgId'"
      - field: newDgId
        type: number
        description: "Body field 'newDgId'"
      - field: updateType
        type: string
        description: "Body field 'updateType'"
      - field: patchPayload
        type: json
        description: "Body field 'patchPayload'"
      - field: savedFilePath
        type: string
        description: "Body field 'savedFilePath'"
      - field: validationStatus
        type: string
        description: "Body field 'validationStatus'"
      - field: validationErrors
        type: array
        description: "Body field 'validationErrors'"
      - field: sessionId
        type: number
        description: "Body field 'sessionId'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request_data:
  assign:
    dg_id: ${incoming.body.dgId}
    new_dg_id: ${incoming.body.newDgId}
    update_type: ${incoming.body.updateType}
    patch_payload: ${incoming.body.patchPayload}
    save_file_path: ${incoming.body.savedFilePath}
    validation_status: ${incoming.body.validationStatus}
    validation_errors: ${incoming.body.validationErrors}
    session_id: ${incoming.body.sessionId}
  next: check_request_type

check_request_type:
  switch:
    - condition: ${update_type == 'minor'}
      next:  assign_minor_type
    - condition: ${update_type == 'patch'}
      next: assign_patch_type
  next: update_type_not_found

assign_patch_type:
  assign:
    active_dg_id: ${incoming.body.dgId}
  next: update_patch_dataset_group_validation

assign_minor_type:
  assign:
    active_dg_id: ${incoming.body.newDgId}
  next: update_minor_dataset_group_validation

update_minor_dataset_group_validation:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-minor-dataset-group-validation-data"
    body:
      id: ${active_dg_id}
      validation_status: ${validation_status}
      validation_errors: ${JSON.stringify(validation_errors)}
  result: res
  next: check_minor_status

check_minor_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_minor_validation_status_type
  next: assign_fail_response

check_minor_validation_status_type:
  switch:
    - condition: ${validation_status === 'in-progress'}
      next: execute_cron_manager
  next: assign_success_response

update_patch_dataset_group_validation:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-patch-dataset-group-validation-data"
    body:
      id: ${active_dg_id}
      validation_errors: ${JSON.stringify(validation_errors)}
  result: res
  next: check_patch_status

check_patch_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: check_patch_validation_status_type
  next: assign_fail_response

check_patch_validation_status_type:
  switch:
    - condition: ${validation_status === 'success'}
      next: update_patch_version_only
  next: assign_success_response

update_patch_version_only:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-patch-version-only-dataset-group"
    body:
      id: ${dg_id}
  result: res
  next: check_patch_version_only_status

check_patch_version_only_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: update_patch_version_in_model_metadata
  next: assign_fail_response

update_patch_version_in_model_metadata:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-data-model-dataset-group-patch-version"
    body:
      dg_id: ${dg_id}
  result: res
  next: check_patch_version_in_model_metadata_status

check_patch_version_in_model_metadata_status:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: execute_cron_manager
  next: assign_fail_response

execute_cron_manager:
  call: http.post
  args:
    url: "[#CLASSIFIER_CRON_MANAGER]/execute/dataset_processor/dataset_processor"
    query:
      cookie: ${incoming.headers.cookie}
      dgId: ${dg_id}
      newDgId: ${new_dg_id}
      updateType: ${update_type}
      savedFilePath: ${save_file_path}
      patchPayload: ${patch_payload}
      sessionId: ${session_id}
  result: res
  next: assign_success_response

assign_success_response:
  assign:
    format_res: {
      dgId: '${active_dg_id}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      dgId: '${active_dg_id}',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

update_type_not_found:
  status: 400
  return: "Update type not found"
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end