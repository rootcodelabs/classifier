declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'ACCEPT'"
  method: get
  accepts: json
  returns: text/*
  namespace: classifier
  allowlist:
    params:
      - field: validationToken
        type: boolean
        description: "parameter 'validationToken'"
    body:
      - field: payload
        type: json
        description: "body field is 'payload'"

extract_request_data:
  assign:
    validation_token: ${incoming.params.validationToken}
    payload: ${incoming.body}
  next: check_process_flow

check_process_flow:
  switch:
    - condition: ${validation_token !==null}
      next: return_validation_token_response
    - condition: ${payload !==null}
      next: assign_outlook_mail_info
  next: return_error_found

return_validation_token_response:
  wrapper: false
  headers:
    Content-Type: text/*
  return: ${validation_token}
  status: 200
  next: end

assign_outlook_mail_info:
  assign:
    resource: ${payload.value[0].resource}
    event_type: ${payload.value[0].changeType}
  next: get_token_info

get_token_info:
  call: http.get
  args:
    url: "[#CLASSIFIER_RUUTER_PRIVATE]/classifier/integration/outlook/token"
  result: res
  next: assign_access_token

assign_access_token:
  assign:
    access_token: ${res.response.body.response.access_token}
  next: get_extracted_mail_info

get_extracted_mail_info:
  call: http.get
  args:
    url: "https://graph.microsoft.com/v1.0/${resource}"
    headers:
      Authorization: ${'Bearer ' + access_token}
  result: mail_info_data
  next: check_extracted_mail_info

check_extracted_mail_info:
  switch:
    - condition: ${200 <= mail_info_data.response.statusCodeValue && mail_info_data.response.statusCodeValue < 300}
      next: check_event_type
  next: return_mail_info_not_found

check_event_type:
  switch:
    - condition: ${event_type === 'updated'}
      next: get_existing_folder_id
  next: rearrange_mail_payload

get_existing_folder_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-outlook-input-row-data"
    body:
      inputId: ${mail_info_data.id}
  result: existing_outlook_info
  next: check_input_response

check_input_response:
  switch:
    - condition: ${200 <= existing_outlook_info.response.statusCodeValue && existing_outlook_info.response.statusCodeValue < 300}
      next: check_folder_id
  next: return_db_request_fail

check_folder_id:
  switch:
    - condition: ${check_folder_id.response.body.primaryFolderId !== mail_info_data.parentFolderId }
      next: rearrange_mail_payload
  next: end

rearrange_mail_payload:
  call: http.post
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_outlook_payload_info"
    headers:
      type: json
    body:
      data: ${mail_info_data.response.body}
  result: outlook_body
  next: send_outlook_data

#check the mail id is an existing id and check categories from mail and db are same
#if different or new send to AI model
send_outlook_data:
  call: reflect.mock
  args:
    url: "[#CLASSIFIER_DMAPPER]/hbs/classifier/return_jira_issue_info"# need correct url
    headers:
      type: json
    body:
      info: ${outlook_body}
    response:
      statusCodeValue: 200
  result: res
  next: check_response

check_response:
  switch:
    - condition: ${200 <= res.response.statusCodeValue && res.response.statusCodeValue < 300}
      next: return_ok
  next: return_bad_request

return_ok:
  status: 200
  return: "Outlook data send successfully"
  next: end

return_mail_info_not_found:
  status: 400
  return: "Mail Info Not Found"
  next: end

return_bad_request:
  status: 400
  return: "Bad Request"
  next: end