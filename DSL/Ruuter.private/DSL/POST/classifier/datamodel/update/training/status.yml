declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'STATUS'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: modelId
        type: number
        description: "Body field 'modelId'"
      - field: trainingStatus
        type: string
        description: "Body field 'trainingStatus'"
      - field: modelS3Location
        type: string
        description: "Body field 'modelS3Location'"
      - field: trainingResults
        type: json
        description: "Body field 'trainingResults'"

extract_request_data:
  assign:
    model_id: ${incoming.body.modelId}
    training_status: ${incoming.body.trainingStatus}
    model_s3_location: ${incoming.body.modelS3Location}
    training_results: ${incoming.body.trainingResults}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${model_id !== null && training_status !== null && model_s3_location !== null}
      next: get_data_model_by_id
  next: return_incorrect_request

get_data_model_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-data-model-by-id"
    body:
      id: ${model_id}
  result: res_model
  next: check_data_model_status

check_data_model_status:
  switch:
    - condition: ${200 <= res_model.response.statusCodeValue && res_model.response.statusCodeValue < 300}
      next: check_data_model_exist
  next: assign_fail_response

check_data_model_exist:
  switch:
    - condition: ${res_model.response.body.length>0}
      next: update_training_data
  next: assign_fail_response

update_training_data:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/update-data-model-training-data"
    body:
      id: ${model_id}
      training_status: ${training_status}
      model_s3_location: ${model_s3_location}
      last_trained_timestamp: ${new Date().toISOString()}
      training_results: ${JSON.stringify(training_results)}
  result: res_update
  next: check_data_model_update_status

check_data_model_update_status:
  switch:
    - condition: ${200 <= res_update.response.statusCodeValue && res_update.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      trainingStatus: '${training_status}',
      operationSuccessful: true,
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      trainingStatus: '',
      operationSuccessful: false,
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end