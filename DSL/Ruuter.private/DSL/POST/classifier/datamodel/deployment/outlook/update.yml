declaration:
  call: declare
  version: 0.1
  description: "Description placeholder for 'UPDATE'"
  method: post
  accepts: json
  returns: json
  namespace: classifier
  allowlist:
    body:
      - field: modelId
        type: number
        description: "Body field 'modelId'"
      - field: replaceDeployment
        type: boolean
        description: "Body field 'replaceDeployment'"
      - field: replaceDeploymentPlatform
        type: string
        description: "Body field 'replaceDeploymentPlatform'"
      - field: bestBaseModel
        type: string
        description: "Body field 'bestBaseModel'"
      - field: progressSessionId
        type: number
        description: "Body field 'progressSessionId'"
    headers:
      - field: cookie
        type: string
        description: "Cookie field"

extract_request:
  assign:
    model_id: ${incoming.body.modelId}
    replace_deployment: ${incoming.body.replaceDeployment}
    replace_deployment_platform: ${incoming.body.replaceDeploymentPlatform}
    best_base_model: ${incoming.body.bestBaseModel}
    progress_session_id: ${incoming.body.progressSessionId}
    cookie: ${incoming.headers.cookie}
  next: check_for_request_data

check_for_request_data:
  switch:
    - condition: ${model_id !== null && replace_deployment_platform !== null && best_base_model !== null && progress_session_id !== null && cookie !==null}
      next: get_data_model_by_id
  next: return_incorrect_request

get_data_model_by_id:
  call: http.post
  args:
    url: "[#CLASSIFIER_RESQL]/get-data-model-by-id"
    body:
      id: ${model_id}
  result: res_model
  next: check_data_model_status

check_data_model_status:
  switch:
    - condition: ${200 <= res_model.response.statusCodeValue && res_model.response.statusCodeValue < 300}
      next: check_data_model_exist
  next: assign_fail_response

check_data_model_exist:
  switch:
    - condition: ${res_model.response.body.length>0}
      next: send_data_to_deployment_inference
  next: assign_empty_response

send_data_to_deployment_inference:
  call: http.post
  args:
    url: "[#CLASSIFIER_MODEL_INFERENCE]/classifier/deployment/outlook/update"
    headers:
      cookie: ${cookie}
    body:
      modelId: ${model_id}
      replaceDeployment: ${replace_deployment}
      replaceDeploymentPlatform: ${replace_deployment_platform}
      bestBaseModel: ${best_base_model}
      progressSessionId: ${progress_session_id}
  result: res_deployment
  next: check_data_deployment_status

check_data_deployment_status:
  switch:
    - condition: ${200 <= res_deployment.response.statusCodeValue && res_deployment.response.statusCodeValue < 300}
      next: assign_success_response
  next: assign_fail_response

assign_success_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      operationSuccessful: true
    }
  next: return_ok

assign_fail_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      operationSuccessful: false
    }
  next: return_bad_request

assign_empty_response:
  assign:
    format_res: {
      modelId: '${model_id}',
      operationSuccessful: false,
      error: "Model Not Found"
    }
  next: return_bad_request

return_ok:
  status: 200
  return: ${format_res}
  next: end

return_bad_request:
  status: 400
  return: ${format_res}
  next: end

return_incorrect_request:
  status: 400
  return: 'Missing Required Fields'
  next: end